{"uid":"5e524d8a97db7e2a","name":"TestCase.C360_Android.C360_兼容接口滤镜包.ops兼容下发-滤镜包(zh_TW语言环境).TestDispatcher#test_api","fullName":"TestCase.C360_Android.C360_兼容接口滤镜包.ops兼容下发-滤镜包(zh_TW语言环境).TestDispatcher#test_api","historyId":"a8afe5b8991ae8fa83d2adc6ef4b0922","time":{"start":1687776802541,"stop":1687776802541,"duration":0},"description":"00179_\"排序优先级（编辑侧）\":2组数据比较","descriptionHtml":"<p>00179_&quot;排序优先级（编辑侧）&quot;:2组数据比较</p>\n","status":"failed","statusMessage":"AssertionError: 断言：参数获取失败\r\n   Error: 'QACMPDATA1'\nassert False","statusTrace":"self = <APITesting.TestCase.C360_Android.C360_兼容接口滤镜包.ops兼容下发-滤镜包(zh_TW语言环境).TestDispatcher object at 0x7fccf83ad7c0>, name = '00179_\"排序优先级（编辑侧）\":2组数据比较', priority = 5\nencryption = 0, sig = 0, env = 'QA', method = 'POST', url = '', headers = {}, params = {}, expected = KeyError('QACMPDATA1'), export = 'NULL'\n\n    @pytest.mark.parametrize(\"name, priority, encryption, sig, env, method, url, headers, params, expected, export\",\n                             test_data)\n    def test_api(self, name, priority, encryption, sig, env, method, url, headers, params, expected, export):\n    \n        allure.dynamic.story(\"{i}\".format(i=name))  # 设置用例story名\n        allure.dynamic.severity(serverity[(priority - 1) if priority <= 5 else 4])  # 设置用例优先级\n        allure.dynamic.title(\"{i}\".format(i=url))  # 设定用例标题\n        allure.dynamic.description(\"{i}\".format(i=name))  # 设定用例描述\n    \n        Log.logger(\"开始执行用例：\" + str(name))\n        Log.logger(\"Request url:\" + str(url))\n    \n        # 获取Global_Var参数\n        self.set_globalVar()\n    \n        # 当url不为NULL 与 ${key}\n        url_re = re.findall(r'(\\$\\{\\w+\\})', url)\n    \n        # url_re2 = re.match(r'^https?://([0-9a-zA-Z\\-._]*\\/)*', url)\n        # 修复 url链接中带有参数的情况\n        url_re2 = re.match(r'^https?://([\\w\\-.=${}&?]*\\/*)*', url)\n    \n        # 若 url 不为纯参数（如：非${QADATA}）\n        if url_re2:\n            # 当url中带有参数时，给url添加参数\n            if url_re:\n                urs_flag, url = self.set_url(url)\n                if not urs_flag:\n                    assert False, \"url：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            # 设置请求头、请求体\n            # 设置 var ${}参数\n            hrs_flag, headers = self.set_headers(headers)\n            prs_flag, params = self.set_parmars(params)\n    \n            if not hrs_flag:\n                assert False, \"请求头headers：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            elif not prs_flag:\n                assert False, \"请求体params：参数获取失败\\r\\n Error: {a}\".format(a=params)\n    \n            # 设置签名\n            headers, params = self.set_sig(method, url, headers, params, sig, env)\n    \n            # 设置 header 中Content_length\n            # headers = self.set_content_length(headers, params)\n    \n            # Log.logger(\"Request Headers:\" + str(headers))\n            # Log.logger(\"Request Body:\" + str(params))\n    \n            # 发起请求\n            data = self.request(url=url, method=method, params=params, encryption=encryption,\n                                headers=headers, timeout=timeout)\n            if not isinstance(data, str):\n    \n                # 获取返回中的数据供后续用例使用\n                grs_flag, e_msg = self.get_var_from_response(copy.deepcopy(export), data)\n                if not grs_flag:\n                    assert False, \"从返回数据中提取参数失败\\r\\n Error: {a}\".format(a=e_msg)\n    \n                # 设置断言参数\n                exp_flag, expected = self.set_expected(expected)\n                if not exp_flag:\n                    assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\n    \n                # 断言\n                self.mul_assert(data, expected)\n            else:\n                allure.attach(data, '返回结果：', attachment_type=allure.attachment_type.HTML)\n                assert False, data\n    \n        elif url != \"\" and url_re:\n            d_res, data = self.set_data(url_re[0])\n            if not d_res:\n                assert False, \"通过host参数获取 response伪数据失败\\r\\n Error: {a}\".format(a=data)\n    \n            if not isinstance(data, str):\n                # Log.logger(\"Get Body:\" + str(data))\n    \n                # 获取返回中的数据供后续用例使用\n                grs_flag, e_msg = self.get_var_from_response(copy.deepcopy(export), data)\n                if not grs_flag:\n                    assert False, \"从返回数据中提取参数失败\\r\\n Error: {a}\".format(a=e_msg)\n    \n                # Log.logger(\"目前参数情况：---- %s\" % str(obj.var))\n    \n                # 设置断言参数\n                exp_flag, expected = self.set_expected(expected)\n                if not exp_flag:\n                    assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\n    \n                # 断言\n                self.mul_assert(data, expected)\n            else:\n                allure.attach(data, '断言结果：', attachment_type=allure.attachment_type.HTML)\n                assert False, data\n    \n        elif url == \"\":\n            # 设置断言参数\n            exp_flag, expected = self.set_expected(expected)\n            if not exp_flag:\n>               assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\nE               AssertionError: 断言：参数获取失败\r\nE                  Error: 'QACMPDATA1'\nE               assert False\n\nTestCase/C360_Android/C360_兼容接口滤镜包/ops兼容下发-滤镜包(zh_TW语言环境).py:348: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"app","time":{"start":1687776728189,"stop":1687776728189,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"modules","time":{"start":1687776728189,"stop":1687776728189,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"assert_msg","time":{"start":1687776728189,"stop":1687776728189,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"timeout","time":{"start":1687776728189,"stop":1687776728189,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"log_level","time":{"start":1687776728189,"stop":1687776728189,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"_xunit_setup_class_fixture_TestDispatcher","time":{"start":1687776789119,"stop":1687776789119,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"class_logging","time":{"start":1687776789119,"stop":1687776789119,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"method_logging","time":{"start":1687776802540,"stop":1687776802540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"testStage":{"description":"00179_\"排序优先级（编辑侧）\":2组数据比较","status":"failed","statusMessage":"AssertionError: 断言：参数获取失败\r\n   Error: 'QACMPDATA1'\nassert False","statusTrace":"self = <APITesting.TestCase.C360_Android.C360_兼容接口滤镜包.ops兼容下发-滤镜包(zh_TW语言环境).TestDispatcher object at 0x7fccf83ad7c0>, name = '00179_\"排序优先级（编辑侧）\":2组数据比较', priority = 5\nencryption = 0, sig = 0, env = 'QA', method = 'POST', url = '', headers = {}, params = {}, expected = KeyError('QACMPDATA1'), export = 'NULL'\n\n    @pytest.mark.parametrize(\"name, priority, encryption, sig, env, method, url, headers, params, expected, export\",\n                             test_data)\n    def test_api(self, name, priority, encryption, sig, env, method, url, headers, params, expected, export):\n    \n        allure.dynamic.story(\"{i}\".format(i=name))  # 设置用例story名\n        allure.dynamic.severity(serverity[(priority - 1) if priority <= 5 else 4])  # 设置用例优先级\n        allure.dynamic.title(\"{i}\".format(i=url))  # 设定用例标题\n        allure.dynamic.description(\"{i}\".format(i=name))  # 设定用例描述\n    \n        Log.logger(\"开始执行用例：\" + str(name))\n        Log.logger(\"Request url:\" + str(url))\n    \n        # 获取Global_Var参数\n        self.set_globalVar()\n    \n        # 当url不为NULL 与 ${key}\n        url_re = re.findall(r'(\\$\\{\\w+\\})', url)\n    \n        # url_re2 = re.match(r'^https?://([0-9a-zA-Z\\-._]*\\/)*', url)\n        # 修复 url链接中带有参数的情况\n        url_re2 = re.match(r'^https?://([\\w\\-.=${}&?]*\\/*)*', url)\n    \n        # 若 url 不为纯参数（如：非${QADATA}）\n        if url_re2:\n            # 当url中带有参数时，给url添加参数\n            if url_re:\n                urs_flag, url = self.set_url(url)\n                if not urs_flag:\n                    assert False, \"url：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            # 设置请求头、请求体\n            # 设置 var ${}参数\n            hrs_flag, headers = self.set_headers(headers)\n            prs_flag, params = self.set_parmars(params)\n    \n            if not hrs_flag:\n                assert False, \"请求头headers：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            elif not prs_flag:\n                assert False, \"请求体params：参数获取失败\\r\\n Error: {a}\".format(a=params)\n    \n            # 设置签名\n            headers, params = self.set_sig(method, url, headers, params, sig, env)\n    \n            # 设置 header 中Content_length\n            # headers = self.set_content_length(headers, params)\n    \n            # Log.logger(\"Request Headers:\" + str(headers))\n            # Log.logger(\"Request Body:\" + str(params))\n    \n            # 发起请求\n            data = self.request(url=url, method=method, params=params, encryption=encryption,\n                                headers=headers, timeout=timeout)\n            if not isinstance(data, str):\n    \n                # 获取返回中的数据供后续用例使用\n                grs_flag, e_msg = self.get_var_from_response(copy.deepcopy(export), data)\n                if not grs_flag:\n                    assert False, \"从返回数据中提取参数失败\\r\\n Error: {a}\".format(a=e_msg)\n    \n                # 设置断言参数\n                exp_flag, expected = self.set_expected(expected)\n                if not exp_flag:\n                    assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\n    \n                # 断言\n                self.mul_assert(data, expected)\n            else:\n                allure.attach(data, '返回结果：', attachment_type=allure.attachment_type.HTML)\n                assert False, data\n    \n        elif url != \"\" and url_re:\n            d_res, data = self.set_data(url_re[0])\n            if not d_res:\n                assert False, \"通过host参数获取 response伪数据失败\\r\\n Error: {a}\".format(a=data)\n    \n            if not isinstance(data, str):\n                # Log.logger(\"Get Body:\" + str(data))\n    \n                # 获取返回中的数据供后续用例使用\n                grs_flag, e_msg = self.get_var_from_response(copy.deepcopy(export), data)\n                if not grs_flag:\n                    assert False, \"从返回数据中提取参数失败\\r\\n Error: {a}\".format(a=e_msg)\n    \n                # Log.logger(\"目前参数情况：---- %s\" % str(obj.var))\n    \n                # 设置断言参数\n                exp_flag, expected = self.set_expected(expected)\n                if not exp_flag:\n                    assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\n    \n                # 断言\n                self.mul_assert(data, expected)\n            else:\n                allure.attach(data, '断言结果：', attachment_type=allure.attachment_type.HTML)\n                assert False, data\n    \n        elif url == \"\":\n            # 设置断言参数\n            exp_flag, expected = self.set_expected(expected)\n            if not exp_flag:\n>               assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\nE               AssertionError: 断言：参数获取失败\r\nE                  Error: 'QACMPDATA1'\nE               assert False\n\nTestCase/C360_Android/C360_兼容接口滤镜包/ops兼容下发-滤镜包(zh_TW语言环境).py:348: AssertionError","steps":[{"name":"step1: 获取Global_Var参数","time":{"start":1687776802541,"stop":1687776802541,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"b866c003a817258b","name":"dc7fee09-a7f9-4190-9533-976d82490fa5-attachment.html","source":"b866c003a817258b.html","type":"text/html","size":57}],"parameters":[],"hasContent":true,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1},{"name":"step8: 设置<断言>中的参数","time":{"start":1687776802541,"stop":1687776802541,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"expected","value":"[{'cmp': ['[\"${QACMPKEY18}\",\"${QACMPKEY19}\"]', '{\"value1\":${QACMPDATA1},\"value2\":${QACMPDATA2},\"cmp_list_seq\":\"\",\"cmp_file\":\"\",\"cmp_filename\":\"\",\"cmp_listlength\":\"\",\"value_map\":\"\",\"value_map_type\":\"\"}']}]"}],"hasContent":true,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"attachments":[{"uid":"7482f784cf8a9bf5","name":"log","source":"7482f784cf8a9bf5.txt","type":"text/plain","size":358}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2},"afterStages":[{"name":"method_logging::0","time":{"start":1687776802549,"stop":1687776802549,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"class_logging::0","time":{"start":1687776803284,"stop":1687776803285,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"_xunit_setup_class_fixture_TestDispatcher::0","time":{"start":1687776803285,"stop":1687776803301,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"labels":[{"name":"story","value":"00179_\"排序优先级（编辑侧）\":2组数据比较"},{"name":"severity","value":"blocker"},{"name":"feature","value":"C360_兼容接口滤镜包"},{"name":"parentSuite","value":"TestCase.C360_Android.C360_兼容接口滤镜包"},{"name":"suite","value":"ops兼容下发-滤镜包(zh_TW语言环境)"},{"name":"subSuite","value":"TestDispatcher"},{"name":"host","value":"wangxiangyudeMacBook-Pro.local"},{"name":"thread","value":"21143-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.C360_Android.C360_兼容接口滤镜包.ops兼容下发-滤镜包(zh_TW语言环境)"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"encryption","value":"0"},{"name":"env","value":"'QA'"},{"name":"expected","value":"[{'cmp': ['[\"${QACMPKEY18}\",\"${QACMPKEY19}\"]', '{\"value1\":${QACMPDATA1},\"value2\":${QACMPDATA2},\"cmp_list_seq\":\"\",\"cmp_file\":\"\",\"cmp_filename\":\"\",\"cmp_listlength\":\"\",\"value_map\":\"\",\"value_map_type\":\"\"}']}]"},{"name":"export","value":"'NULL'"},{"name":"headers","value":"{}"},{"name":"method","value":"'POST'"},{"name":"name","value":"'00179_\"排序优先级（编辑侧）\":2组数据比较'"},{"name":"params","value":"{}"},{"name":"priority","value":"5"},{"name":"sig","value":"0"},{"name":"url","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"5e524d8a97db7e2a.json","parameterValues":["0","'QA'","[{'cmp': ['[\"${QACMPKEY18}\",\"${QACMPKEY19}\"]', '{\"value1\":${QACMPDATA1},\"value2\":${QACMPDATA2},\"cmp_list_seq\":\"\",\"cmp_file\":\"\",\"cmp_filename\":\"\",\"cmp_listlength\":\"\",\"value_map\":\"\",\"value_map_type\":\"\"}']}]","'NULL'","{}","'POST'","'00179_\"排序优先级（编辑侧）\":2组数据比较'","{}","5","0","''"]}