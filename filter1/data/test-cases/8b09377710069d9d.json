{"uid":"8b09377710069d9d","name":"https://cdn-bm.camera360.com/api/product/query","fullName":"TestCase.C360_Android.C360_兼容接口滤镜包.ops兼容下发-滤镜包(ja_JP语言环境).TestDispatcher#test_api","historyId":"f6c0ce63e45f7cddcb6174438838b7ba","time":{"start":1687776828163,"stop":1687776830340,"duration":2177},"description":"00333_值获取","descriptionHtml":"<p>00333_值获取</p>\n","status":"failed","statusMessage":"AssertionError: (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\n  (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\n  (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\n  \nassert False","statusTrace":"self = <APITesting.TestCase.C360_Android.C360_兼容接口滤镜包.ops兼容下发-滤镜包(ja_JP语言环境).TestDispatcher object at 0x7fcce81ef1f0>, name = '00333_值获取', priority = 5, encryption = 0, sig = 8\nenv = 'PROD', method = 'POST', url = 'https://cdn-bm.camera360.com/api/product/query'\nheaders = {'accept-encoding': 'gzip', 'connection': 'Keep-Alive', 'content-type': 'application/x-www-form-urlencoded; charset=UTF-8', 'user-agent': 'Dalvik/2.1.0 (Linux; U; Android 12; PDEM10 Build/RKQ1.211103.002)', ...}\nparams = {'UTCOffset': '28800', 'appName': 'camera360', 'appVersion': '9.9.29', 'channel': 'GoogleMarket', ...}, expected = [{'eq': ['code', '200']}]\nexport = {'groupScenesId': 'body.data.group_scenes.scenes[*].id', 'itemsId': 'body.data.items[*].id', 'packagesId': 'body.data.packages[*].pid', 'scenesId': 'body.data.scenes[*].id', ...}\n\n    @pytest.mark.parametrize(\"name, priority, encryption, sig, env, method, url, headers, params, expected, export\",\n                             test_data)\n    def test_api(self, name, priority, encryption, sig, env, method, url, headers, params, expected, export):\n    \n        allure.dynamic.story(\"{i}\".format(i=name))  # 设置用例story名\n        allure.dynamic.severity(serverity[(priority - 1) if priority <= 5 else 4])  # 设置用例优先级\n        allure.dynamic.title(\"{i}\".format(i=url))  # 设定用例标题\n        allure.dynamic.description(\"{i}\".format(i=name))  # 设定用例描述\n    \n        Log.logger(\"开始执行用例：\" + str(name))\n        Log.logger(\"Request url:\" + str(url))\n    \n        # 获取Global_Var参数\n        self.set_globalVar()\n    \n        # 当url不为NULL 与 ${key}\n        url_re = re.findall(r'(\\$\\{\\w+\\})', url)\n    \n        # url_re2 = re.match(r'^https?://([0-9a-zA-Z\\-._]*\\/)*', url)\n        # 修复 url链接中带有参数的情况\n        url_re2 = re.match(r'^https?://([\\w\\-.=${}&?]*\\/*)*', url)\n    \n        # 若 url 不为纯参数（如：非${QADATA}）\n        if url_re2:\n            # 当url中带有参数时，给url添加参数\n            if url_re:\n                urs_flag, url = self.set_url(url)\n                if not urs_flag:\n                    assert False, \"url：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            # 设置请求头、请求体\n            # 设置 var ${}参数\n            hrs_flag, headers = self.set_headers(headers)\n            prs_flag, params = self.set_parmars(params)\n    \n            if not hrs_flag:\n                assert False, \"请求头headers：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            elif not prs_flag:\n                assert False, \"请求体params：参数获取失败\\r\\n Error: {a}\".format(a=params)\n    \n            # 设置签名\n            headers, params = self.set_sig(method, url, headers, params, sig, env)\n    \n            # 设置 header 中Content_length\n            # headers = self.set_content_length(headers, params)\n    \n            # Log.logger(\"Request Headers:\" + str(headers))\n            # Log.logger(\"Request Body:\" + str(params))\n    \n            # 发起请求\n            data = self.request(url=url, method=method, params=params, encryption=encryption,\n                                headers=headers, timeout=timeout)\n            if not isinstance(data, str):\n    \n                # 获取返回中的数据供后续用例使用\n                grs_flag, e_msg = self.get_var_from_response(copy.deepcopy(export), data)\n                if not grs_flag:\n                    assert False, \"从返回数据中提取参数失败\\r\\n Error: {a}\".format(a=e_msg)\n    \n                # 设置断言参数\n                exp_flag, expected = self.set_expected(expected)\n                if not exp_flag:\n                    assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\n    \n                # 断言\n                self.mul_assert(data, expected)\n            else:\n                allure.attach(data, '返回结果：', attachment_type=allure.attachment_type.HTML)\n>               assert False, data\nE               AssertionError: (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\nE                 (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\nE                 (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\nE                 \nE               assert False\n\nTestCase/C360_Android/C360_兼容接口滤镜包/ops兼容下发-滤镜包(ja_JP语言环境).py:316: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"app","time":{"start":1687776728189,"stop":1687776728189,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"modules","time":{"start":1687776728189,"stop":1687776728189,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"assert_msg","time":{"start":1687776728189,"stop":1687776728189,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"timeout","time":{"start":1687776728189,"stop":1687776728189,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"log_level","time":{"start":1687776728189,"stop":1687776728189,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"_xunit_setup_class_fixture_TestDispatcher","time":{"start":1687776828161,"stop":1687776828161,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"method_logging","time":{"start":1687776828162,"stop":1687776828162,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"class_logging","time":{"start":1687776828162,"stop":1687776828162,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"testStage":{"description":"00333_值获取","status":"failed","statusMessage":"AssertionError: (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\n  (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\n  (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\n  \nassert False","statusTrace":"self = <APITesting.TestCase.C360_Android.C360_兼容接口滤镜包.ops兼容下发-滤镜包(ja_JP语言环境).TestDispatcher object at 0x7fcce81ef1f0>, name = '00333_值获取', priority = 5, encryption = 0, sig = 8\nenv = 'PROD', method = 'POST', url = 'https://cdn-bm.camera360.com/api/product/query'\nheaders = {'accept-encoding': 'gzip', 'connection': 'Keep-Alive', 'content-type': 'application/x-www-form-urlencoded; charset=UTF-8', 'user-agent': 'Dalvik/2.1.0 (Linux; U; Android 12; PDEM10 Build/RKQ1.211103.002)', ...}\nparams = {'UTCOffset': '28800', 'appName': 'camera360', 'appVersion': '9.9.29', 'channel': 'GoogleMarket', ...}, expected = [{'eq': ['code', '200']}]\nexport = {'groupScenesId': 'body.data.group_scenes.scenes[*].id', 'itemsId': 'body.data.items[*].id', 'packagesId': 'body.data.packages[*].pid', 'scenesId': 'body.data.scenes[*].id', ...}\n\n    @pytest.mark.parametrize(\"name, priority, encryption, sig, env, method, url, headers, params, expected, export\",\n                             test_data)\n    def test_api(self, name, priority, encryption, sig, env, method, url, headers, params, expected, export):\n    \n        allure.dynamic.story(\"{i}\".format(i=name))  # 设置用例story名\n        allure.dynamic.severity(serverity[(priority - 1) if priority <= 5 else 4])  # 设置用例优先级\n        allure.dynamic.title(\"{i}\".format(i=url))  # 设定用例标题\n        allure.dynamic.description(\"{i}\".format(i=name))  # 设定用例描述\n    \n        Log.logger(\"开始执行用例：\" + str(name))\n        Log.logger(\"Request url:\" + str(url))\n    \n        # 获取Global_Var参数\n        self.set_globalVar()\n    \n        # 当url不为NULL 与 ${key}\n        url_re = re.findall(r'(\\$\\{\\w+\\})', url)\n    \n        # url_re2 = re.match(r'^https?://([0-9a-zA-Z\\-._]*\\/)*', url)\n        # 修复 url链接中带有参数的情况\n        url_re2 = re.match(r'^https?://([\\w\\-.=${}&?]*\\/*)*', url)\n    \n        # 若 url 不为纯参数（如：非${QADATA}）\n        if url_re2:\n            # 当url中带有参数时，给url添加参数\n            if url_re:\n                urs_flag, url = self.set_url(url)\n                if not urs_flag:\n                    assert False, \"url：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            # 设置请求头、请求体\n            # 设置 var ${}参数\n            hrs_flag, headers = self.set_headers(headers)\n            prs_flag, params = self.set_parmars(params)\n    \n            if not hrs_flag:\n                assert False, \"请求头headers：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            elif not prs_flag:\n                assert False, \"请求体params：参数获取失败\\r\\n Error: {a}\".format(a=params)\n    \n            # 设置签名\n            headers, params = self.set_sig(method, url, headers, params, sig, env)\n    \n            # 设置 header 中Content_length\n            # headers = self.set_content_length(headers, params)\n    \n            # Log.logger(\"Request Headers:\" + str(headers))\n            # Log.logger(\"Request Body:\" + str(params))\n    \n            # 发起请求\n            data = self.request(url=url, method=method, params=params, encryption=encryption,\n                                headers=headers, timeout=timeout)\n            if not isinstance(data, str):\n    \n                # 获取返回中的数据供后续用例使用\n                grs_flag, e_msg = self.get_var_from_response(copy.deepcopy(export), data)\n                if not grs_flag:\n                    assert False, \"从返回数据中提取参数失败\\r\\n Error: {a}\".format(a=e_msg)\n    \n                # 设置断言参数\n                exp_flag, expected = self.set_expected(expected)\n                if not exp_flag:\n                    assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\n    \n                # 断言\n                self.mul_assert(data, expected)\n            else:\n                allure.attach(data, '返回结果：', attachment_type=allure.attachment_type.HTML)\n>               assert False, data\nE               AssertionError: (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\nE                 (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\nE                 (\"Connection broken: InvalidChunkLength(got length b'', 0 bytes read)\", InvalidChunkLength(got length b'', 0 bytes read))\nE                 \nE               assert False\n\nTestCase/C360_Android/C360_兼容接口滤镜包/ops兼容下发-滤镜包(ja_JP语言环境).py:316: AssertionError","steps":[{"name":"step1: 获取Global_Var参数","time":{"start":1687776828163,"stop":1687776828163,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"5e9742bc2a7e1c63","name":"cc6edde0-d830-4ddc-9770-d713cde1d0ec-attachment.html","source":"5e9742bc2a7e1c63.html","type":"text/html","size":57}],"parameters":[],"hasContent":true,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1},{"name":"step3: 设置<请求头>参数","time":{"start":1687776828163,"stop":1687776828163,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"7c07107f91f61e26","name":"设置后的<请求头>：","source":"7c07107f91f61e26.html","type":"text/html","size":246}],"parameters":[{"name":"headers","value":"{'accept-encoding': '${acceptencoding}', 'connection': '${connection}', 'content-type': '${contenttype}', 'user-agent': '${useragent}', 'x-postman-captr': '${xpostmancaptr}'}"}],"hasContent":true,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1},{"name":"step4: 设置<请求体>参数","time":{"start":1687776828163,"stop":1687776828163,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"6c9d459e80a4660c","name":"设置后的<请求体> ","source":"6c9d459e80a4660c.html","type":"text/html","size":436}],"parameters":[{"name":"params","value":"{'UTCOffset': '${UTCOffset}', 'appName': '${appName}', 'appVersion': '${appVersion}', 'channel': '${channel}', 'device': '${device1}', 'deviceId': '${deviceId}', 'eid': '${eid}', 'growingIOUserId': '${growingIOUserId}', 'language': '${language}', 'localTime': '${localTime}', 'locale': '${locale}', 'newAddToday': '${newAddToday}', 'platform': '${platform}', 'rTime': '${rTime}', 'sig': '${sig}', 'version': '${version}'}"}],"hasContent":true,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1},{"name":"step5: 设置请求体中<sig>参数","time":{"start":1687776828163,"stop":1687776828164,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"e43840b8cf85b2f6","name":"设置后的<请求头、体> ","source":"e43840b8cf85b2f6.html","type":"text/html","size":693}],"parameters":[{"name":"method","value":"'POST'"},{"name":"url","value":"'https://cdn-bm.camera360.com/api/product/query'"},{"name":"headers","value":"{'accept-encoding': 'gzip', 'connection': 'Keep-Alive', 'content-type': 'application/x-www-form-urlencoded; charset=UTF-8', 'user-agent': 'Dalvik/2.1.0 (Linux; U; Android 12; PDEM10 Build/RKQ1.211103.002)', 'x-postman-captr': '9686094'}"},{"name":"params","value":"{'UTCOffset': '28800', 'appName': 'camera360', 'appVersion': '9.9.29', 'channel': 'GoogleMarket', 'device': 'PDEM10', 'deviceId': '1fc05043f3cbb178a7a1b914c17c2c79', 'eid': '1fc05043f3cbb178a7a1b914c17c2c79', 'growingIOUserId': 'bbfe4777-a33c-3606-b036-7bffc42a7a8f', 'language': 'ja_JP', 'localTime': '1673247449', 'locale': 'ja_JP', 'newAddToday': '1', 'platform': 'android', 'rTime': '1673247449', 'sig': '1abb9ebd314937803e9f69f720ccbb4d', 'version': '0'}"},{"name":"sig","value":"8"},{"name":"env","value":"'PROD'"}],"hasContent":true,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1},{"name":"step6: 发起请求","time":{"start":1687776828164,"stop":1687776830338,"duration":2174},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"url","value":"'https://cdn-bm.camera360.com/api/product/query'"},{"name":"method","value":"'POST'"},{"name":"params","value":"{'UTCOffset': '28800', 'appName': 'camera360', 'appVersion': '9.9.29', 'channel': 'GoogleMarket', 'device': 'PDEM10', 'deviceId': '1fc05043f3cbb178a7a1b914c17c2c79', 'eid': '1fc05043f3cbb178a7a1b914c17c2c79', 'growingIOUserId': 'bbfe4777-a33c-3606-b036-7bffc42a7a8f', 'language': 'ja_JP', 'localTime': '1673247449', 'locale': 'ja_JP', 'newAddToday': '1', 'platform': 'android', 'rTime': '1673247449', 'sig': 'a530e3e62f8704ef108133c338dfb715', 'version': '0'}"},{"name":"encryption","value":"0"},{"name":"headers","value":"{'accept-encoding': 'gzip', 'connection': 'Keep-Alive', 'content-type': 'application/x-www-form-urlencoded; charset=UTF-8', 'user-agent': 'Dalvik/2.1.0 (Linux; U; Android 12; PDEM10 Build/RKQ1.211103.002)', 'x-postman-captr': '9686094'}"},{"name":"timeout","value":"10.0"}],"hasContent":true,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"attachments":[{"uid":"6dc4dc91512fdae5","name":"返回结果：","source":"6dc4dc91512fdae5.html","type":"text/html","size":366},{"uid":"f2f3b360c7fd014","name":"log","source":"f2f3b360c7fd014.txt","type":"text/plain","size":438}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":6},"afterStages":[{"name":"method_logging::0","time":{"start":1687776830366,"stop":1687776830367,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"class_logging::0","time":{"start":1687776853194,"stop":1687776853194,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0},{"name":"_xunit_setup_class_fixture_TestDispatcher::0","time":{"start":1687776853194,"stop":1687776853210,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0}],"labels":[{"name":"story","value":"00333_值获取"},{"name":"severity","value":"blocker"},{"name":"feature","value":"C360_兼容接口滤镜包"},{"name":"parentSuite","value":"TestCase.C360_Android.C360_兼容接口滤镜包"},{"name":"suite","value":"ops兼容下发-滤镜包(ja_JP语言环境)"},{"name":"subSuite","value":"TestDispatcher"},{"name":"host","value":"wangxiangyudeMacBook-Pro.local"},{"name":"thread","value":"21143-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.C360_Android.C360_兼容接口滤镜包.ops兼容下发-滤镜包(ja_JP语言环境)"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"encryption","value":"0"},{"name":"env","value":"'PROD'"},{"name":"expected","value":"[{'eq': ['code', '200']}]"},{"name":"export","value":"{'groupScenesId': 'body.data.group_scenes.scenes[*].id', 'itemsId': 'body.data.items[*].id', 'packagesId': 'body.data.packages[*].pid', 'scenesId': 'body.data.scenes[*].id', 'topicId': 'body.data.topics[*].topic_id'}"},{"name":"headers","value":"{'accept-encoding': '${acceptencoding}', 'connection': '${connection}', 'content-type': '${contenttype}', 'user-agent': '${useragent}', 'x-postman-captr': '${xpostmancaptr}'}"},{"name":"method","value":"'POST'"},{"name":"name","value":"'00333_值获取'"},{"name":"params","value":"{'UTCOffset': '${UTCOffset}', 'appName': '${appName}', 'appVersion': '${appVersion}', 'channel': '${channel}', 'device': '${device1}', 'deviceId': '${deviceId}', 'eid': '${eid}', 'growingIOUserId': '${growingIOUserId}', 'language': '${language}', 'localTime': '${localTime}', 'locale': '${locale}', 'newAddToday': '${newAddToday}', 'platform': '${platform}', 'rTime': '${rTime}', 'sig': '${sig}', 'version': '${version}'}"},{"name":"priority","value":"5"},{"name":"sig","value":"8"},{"name":"url","value":"'https://cdn-bm.camera360.com/api/product/query'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"8b09377710069d9d.json","parameterValues":["0","'PROD'","[{'eq': ['code', '200']}]","{'groupScenesId': 'body.data.group_scenes.scenes[*].id', 'itemsId': 'body.data.items[*].id', 'packagesId': 'body.data.packages[*].pid', 'scenesId': 'body.data.scenes[*].id', 'topicId': 'body.data.topics[*].topic_id'}","{'accept-encoding': '${acceptencoding}', 'connection': '${connection}', 'content-type': '${contenttype}', 'user-agent': '${useragent}', 'x-postman-captr': '${xpostmancaptr}'}","'POST'","'00333_值获取'","{'UTCOffset': '${UTCOffset}', 'appName': '${appName}', 'appVersion': '${appVersion}', 'channel': '${channel}', 'device': '${device1}', 'deviceId': '${deviceId}', 'eid': '${eid}', 'growingIOUserId': '${growingIOUserId}', 'language': '${language}', 'localTime': '${localTime}', 'locale': '${locale}', 'newAddToday': '${newAddToday}', 'platform': '${platform}', 'rTime': '${rTime}', 'sig': '${sig}', 'version': '${version}'}","5","8","'https://cdn-bm.camera360.com/api/product/query'"]}